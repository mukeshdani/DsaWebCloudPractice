How Projects Are Built in the Industry

1. Requirements Gathering
- Handled by: Product Manager (PM) or Project Manager
- Activities: Understanding business needs, defining scope, and documenting requirements.

2. Design Phase
- Handled by: Senior Engineers or Engineering Managers (EM)
- Activities:
  - System architecture planning
  - High-Level Design (HLD)
  - Low-Level Design (LLD)
  - Tech stack selection
  - Microservices planning (if applicable)

Note: This design phase is not limited to UI design — it includes backend architecture and service planning.

3. Development
- Handled by: SDE1, SDE2, etc.
- Activities:
  - Writing code
  - Unit testing
  - Code reviews

4. Testing
- Handled by: SDET or QA Testers
- Activities:
  - Functional testing
  - Regression testing
  - Automation testing

5. Deployment
- Handled by: DevOps or SRE (Site Reliability Engineering) Teams
- Activities:
  - CI/CD pipelines
  - Infrastructure provisioning
  - Monitoring setup

6. Maintenance
- Ongoing support, bug fixes, and performance improvements.

SDLC (Software Development Life Cycle) – Waterfall Model

1. PM collaborates with designers to finalize requirements.
2. Design documents are created (HLD, LLD, tech stack, microservices layout).
3. Engineering team takes over for development and testing.
4. Deployment and maintenance follow.

Monolith vs Microservices Comparison

Feature             | Monolith                          | Microservices                        
--------------------|-----------------------------------|--------------------------------------
Dev Speed           | Slower                            | Faster (independent teams)           
Code Repo           | Single repo                       | Multiple repos                       
Scalability         | Limited                           | Highly scalable                      
Deployment          | All-at-once                       | Independent deployments              
Tech Stack          | Uniform                           | Polyglot (different per service)     
Infra Cost          | Lower initially                   | Higher (more infra overhead)         
Complexity          | Lower                             | Higher (service coordination)        
Fault Isolation     | Poor                              | Strong (one service can fail safely) 
Testing             | Easier                            | More complex                         
Ownership           | Shared                            | Clear per service                    
Maintenance         | Centralized                       | Distributed                          
Rewrites/Reworks    | Risky                             | Easier to isolate                    
Debugging           | Simpler                           | Requires tracing tools               
Dev Experience      | Straightforward                   | Requires more tooling                

Example: What Happens in dev.com?

Architecture: Microservices

- student-web: built with Next.js
- admin-web: built with React.js
- backend: built with Node.js
- student-mobile-app: built with React Native

Project: Dev Tinder Clone

Microservices Used:
1. Frontend: React
2. Backend: Node.js + MongoDB

Features to Build:
1. Create an account
2. Login
3. Update profile
4. Feed page (explore)
5. Send/Ignore connection requests
6. View matches
7. View sent/received requests
8. Update profile

Tech Planning:
- 2 Microservices:
  - Frontend: React
  - Backend: Node.js + MongoDB

Low-Level Design (LLD)

1. Database Design

- userCollection:
  - firstName, lastName, emailId, password, age, gender

- connectionRequest:
  - fromUserId, toUserId, status: PENDING, APPROVED, ACCEPTED, REJECTED, IGNORED

2. API Design (RESTful)

Method | Endpoint         | Description                      
--------|------------------|----------------------------------
POST   | /signup          | Register a new user              
POST   | /login           | User login                       
GET    | /profile         | Get user profile                 
POST   | /profile         | Create user profile              
PATCH  | /profile         | Update user profile              
DELETE | /profile         | Delete user profile              
POST   | /sendRequest     | Send/Ignore connection request   
POST   | /reviewRequest   | Accept/Reject a request          
GET    | /request         | View all requests                
GET    | /connection      | View all connections             
